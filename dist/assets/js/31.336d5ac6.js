(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{316:function(t,s,n){"use strict";n.r(s);var a=n(14),e=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"事件循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件循环"}},[t._v("#")]),t._v(" 事件循环")]),t._v(" "),s("p",[t._v("事件循环就是编译器解析与执行代码的规则，js本身就是单线程的，既同一时刻只能干一件事，而\njs任务包含了同步任务和异步任务，浏览器会率先执行同步代码，将异步代码放到消息队列中，待主线程任务完成后\n在执行异步代码，而异步代码又分为 宏任务 和 微任务 ，在同步代码执行完成后，回先执行 异步代码的微任务 在执行宏任务\n如果异步任务中仍有异步任务，会继续放到消息队列中 依次类推，就会形成 事件循环")]),t._v(" "),s("h4",{attrs:{id:"宏任务有"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#宏任务有"}},[t._v("#")]),t._v(" 宏任务有")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("setTimeout\nsetInterval\nscript\n特点：不唯一性 存在优先级 异步执行，同一事件循环中，只执行一个\n\t\n微任务\npromise.then()\npromise.catch()\n特点： 唯一性 整个事件循环只存在一个， 执行同步\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);