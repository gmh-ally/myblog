(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{485:function(v,e,t){"use strict";t.r(e);var s=t(2),_=Object(s.a)({},(function(){var v=this,e=v._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h2",{attrs:{id:"ts和js的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ts和js的区别"}},[v._v("#")]),v._v(" ts和js的区别")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("TypeScript 引入了 JavaScript 中没有的“类”概念")])]),v._v(" "),e("li",[e("p",[v._v("TypeScript 中引入了模块的概念，可以把声明、数据、函数和类封装在模块中。")])]),v._v(" "),e("li",[e("p",[v._v("js没有重载概念，ts有可以重载")])]),v._v(" "),e("li",[e("p",[v._v("ts增加了接口interface、泛型、类、类的多态、继承等")])]),v._v(" "),e("li",[e("p",[v._v("ts对比js基础类型上，增加了 void/never/any/元组/枚举/以及一些高级类型")])])]),v._v(" "),e("p",[v._v("js有的类型：boolean类型、number类型、string类型、array类型、undefined、null")]),v._v(" "),e("p",[v._v("ts新增的类型：tuple类型（元组类型）、enum类型（枚举类型）、any类型（任意类型）")]),v._v(" "),e("p",[v._v("void类型（没有任何类型）表示定义方法没有返回值\nnever类型：是其他类型（包括null和undefined）的子类型，代表从不会出现的值这意味着声明never变量只能被never类型所赋值")]),v._v(" "),e("p",[v._v("js变量是没有类型的，即age=18，age可以是任何类型的，可以继续给age赋值为age=”aaa”\nTs有明确的类型(即：变量名:number(数值类型))  eg：let age: number = 18")]),v._v(" "),e("ul",[e("li",[v._v("ts需要静态编译，它提供了强类型与更多面向对象的内容。")]),v._v(" "),e("li",[v._v("ts最终仍要编译为弱类型，基于对象的原生的js，再运行。故ts相较java/C#这样天生面向对象语言是有区别和局限的")]),v._v(" "),e("li",[v._v("ts是由微软牵头主导的，其语法风格与概念主要来自C#，")])]),v._v(" "),e("p",[v._v("ts优势")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("类型化思维方式，使开发更严谨，能帮助开发人员检测出错误并修改，提前发现错误，减少改Bug时间")])]),v._v(" "),e("li",[e("p",[v._v("类型系统提高了代码可读性，便于开发人员做注释，维护和重构代码更加容易")])]),v._v(" "),e("li",[e("p",[v._v("补充了接口、枚举等开发大型应用时JS缺失的功能")])]),v._v(" "),e("li",[e("p",[v._v("TypeScript工具使重构更变的容易、快捷。")])]),v._v(" "),e("li",[e("p",[v._v("类型安全功能能在编码期间检测错误，这为开发人员创建了一个更高效的编码和调试过程。")])])])])}),[],!1,null,null,null);e.default=_.exports}}]);